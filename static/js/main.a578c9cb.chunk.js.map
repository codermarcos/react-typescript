{"version":3,"sources":["views/Home/Home.tsx","store/cep/types.ts","views/Home/Home.connect.ts","views/Home/index.tsx","views/Address/Address.tsx","views/Address/Address.connect.ts","views/Address/index.tsx","serviceWorker.ts","store/cep/state.ts","store/cep/reducers.ts","store/index.ts","services/cep.ts","store/cep/saga.ts","store/saga.ts","configureStore.ts","index.tsx"],"names":["Home","CepActionType","props","useState","cep","state","setState","onSubmit","e","preventDefault","searchCep","type","defaultValue","onInput","currentTarget","value","mapDispatch","fetch","Connected","connect","connector","Helmet","name","content","Address","html","address","logradouro","URLSearchParams","useLocation","search","get","replace","Boolean","window","location","hostname","exec","complemento","bairro","localidade","uf","unidade","ibge","gia","cepReducer","defaultState","action","save","payload","rootReducer","history","combineReducers","router","connectRouter","cepService","then","response","json","call","put","select","pathname","page","push","console","log","rootSaga","takeLatest","sagaMiddleware","createSagaMiddleware","createBrowserHistory","basename","process","store","preloadedState","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","createRootReducer","applyMiddleware","routerMiddleware","run","configureStore","rootElement","document","getElementById","app","StrictMode","context","ReactReduxContext","path","exact","render","to","hasChildNodes","ReactDOM","hydrate","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a578c9cb.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport 'src/views/Home/Home.css';\n\nimport { PropsFromRedux } from './Home.connect';\n\nexport interface State {\n  cep: string;\n}\n\nfunction Home(props: PropsFromRedux) {\n  const [state, setState] = useState({ cep: '' });\n\n  const send = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    props.searchCep(state.cep);\n  };\n\n  return (\n    <main>\n      <form onSubmit={send}>\n        <input\n          type=\"text\"\n          defaultValue={state.cep}\n          onInput={(e) => setState({ cep: e.currentTarget.value })}\n        />\n\n        <button type=\"submit\">\n          search\n        </button>\n      </form>\n    </main>\n  );\n}\n\nexport default Home;\n","export interface Address {\n  cep: string;\n  logradouro: string;\n  complemento: string;\n  bairro: string;\n  localidade: string;\n  uf: string;\n  unidade: string;\n  ibge: string;\n  gia: string;\n}\n\nexport interface CepState {\n  address: Address;\n}\n\nexport enum CepActionType {\n  fetch = 'fetch',\n  save = 'save',\n}\n\nexport interface FetchCepAction {\n  type: CepActionType.fetch;\n  cep: string;\n}\n\nexport interface SaveCepAction {\n  type: CepActionType.save;\n  payload: {\n    address: Address;\n  };\n}\n\nexport type CepActionTypes = FetchCepAction | SaveCepAction;\n","import { connect, ConnectedProps } from 'react-redux';\nimport { CepActionType } from 'src/store/cep/types';\n\nconst mapDispatch = {\n  searchCep: (cep: string) => ({ type: CepActionType.fetch, cep }),\n};\n\nconst connector = connect(null, mapDispatch);\n\nexport default connector;\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Route, RouteProps } from 'react-router-dom';\n\nimport Home from 'src/views/Home/Home';\nimport connector from 'src/views/Home/Home.connect';\n\nconst Connected = connector(Home);\n\nexport default (props: RouteProps): JSX.Element => (\n  <Route {...props}>\n    <Helmet>\n      <title>Search | Cep</title>\n      <meta name=\"description\" content=\"Search cep decription\" />\n    </Helmet>\n    <Connected />\n  </Route>\n);\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport 'src/views/Address/Address.css';\n\nimport { PropsFromRedux } from 'src/views/Address/Address.connect';\n\n\nfunction Address(props: PropsFromRedux) {\n  let html: JSX.Element = <main>Procurando</main>;\n  const { address } = props;\n\n  if (address && address.logradouro) {\n    html = (\n      <main>\n        {address.logradouro}\n      </main>\n    );\n  }\n\n  const cep = new URLSearchParams(useLocation().search).get('cep');\n\n  if (!cep) return html = <main>Cep n√£o encontrado</main>;\n\n  if (cep && cep !== address.cep.replace('-', '')) {\n    const { searchCep } = props;\n    searchCep(cep);\n  }\n\n  return html;\n}\n\nexport default Address;\n","import { connect, ConnectedProps } from 'react-redux';\nimport { CepActionType } from 'src/store/cep/types';\nimport { RootState } from 'src/store';\n\nconst mapState = (state: RootState) => ({\n  address: state.cep.address,\n});\n\nconst mapDispatch = {\n  searchCep: (cep: string) => ({ type: CepActionType.fetch, cep }),\n};\n\nconst connector = connect(mapState, mapDispatch);\n\nexport default connector;\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Route, RouteProps } from 'react-router-dom';\n\nimport Address from 'src/views/Address/Address';\nimport connector from 'src/views/Address/Address.connect';\n\nconst Connected = connector(Address);\n\nexport default (props: RouteProps): JSX.Element => (\n  <Route {...props}>\n    <Helmet>\n      <title>Address | Cep</title>\n      <meta name=\"description\" content=\"Cep address decription\" />\n    </Helmet>\n    <Connected />\n  </Route>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/.exec(window.location.hostname),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log('New content is available and will be used when all ');\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(console.error.bind(null, 'Error during service worker registration:'));\n}\n\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && !contentType.includes('javascript'))\n      ) {\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => console.log('No internet connection found. App is running in offline mode.'));\n}\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => console.error(error.message));\n  }\n}\n","import { CepState } from './types';\n\nconst state: CepState = {\n  address: {\n    cep: '',\n    logradouro: '',\n    complemento: '',\n    bairro: '',\n    localidade: '',\n    uf: '',\n    unidade: '',\n    ibge: '',\n    gia: '',\n  },\n};\n\nexport default state;\n","import { Reducer } from 'react';\n\nimport defaultState from 'src/store/cep/state';\nimport { CepState, CepActionTypes, CepActionType } from 'src/store/cep/types';\n\nconst cepReducer: Reducer<CepState, CepActionTypes> = (state = defaultState, action) => {\n  switch (action.type) {\n    case CepActionType.save:\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default cepReducer;\n","import { History } from 'history';\nimport { combineReducers } from 'redux';\nimport { connectRouter, RouterState } from 'connected-react-router';\n\nimport cep from 'src/store/cep/reducers';\nimport { CepState } from './cep/types';\n\nconst rootReducer = (history: History) => combineReducers({\n  router: connectRouter(history),\n  cep,\n});\n\nexport interface RootState {\n  router: RouterState;\n  cep: CepState;\n}\n\nexport default rootReducer;\n","const baseUrl = 'https://viacep.com.br/ws/';\n\nconst cepService = (cep: string) => fetch(`${baseUrl}${cep}/json`).then((response) => response.json());\n\nexport default cepService;\n","import { FetchCepAction, CepActionType } from 'src/store/cep/types';\nimport { call, put, select } from 'redux-saga/effects';\nimport { push } from 'connected-react-router';\nimport cepService from 'src/services/cep';\nimport { RootState } from 'src/store';\n\nfunction* searchCep(action: FetchCepAction) {\n  try {\n    const address = yield call(cepService, action.cep);\n\n    yield put({ type: CepActionType.save, payload: { address } });\n\n    const page = yield select((state: RootState) => state.router.location.pathname);\n\n    if (!page || page === '/search') yield put(push(`address?cep=${action.cep}`));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport default searchCep;\n","import { takeLatest } from 'redux-saga/effects';\n\nimport searchCep from './cep/saga';\nimport { CepActionType } from './cep/types';\n\nfunction* rootSaga() {\n  yield takeLatest(CepActionType.fetch, searchCep);\n}\n\nexport default rootSaga;\n","import createSagaMiddleware from 'redux-saga';\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\nimport { applyMiddleware, compose, createStore } from 'redux';\n\nimport createRootReducer from 'src/store';\nimport rootSaga from 'src/store/saga';\n\nexport const sagaMiddleware = createSagaMiddleware();\nexport const history = createBrowserHistory({ basename: process.env.PUBLIC_URL });\n\nexport default function configureStore(preloadedState?: any) {\n  const composeEnhancer: typeof compose = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n  const store = createStore(\n    createRootReducer(history),\n    preloadedState,\n    composeEnhancer(\n      applyMiddleware(sagaMiddleware),\n      applyMiddleware(routerMiddleware(history)),\n    ),\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n","import 'unfetch/polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { Provider, ReactReduxContext } from 'react-redux';\n\nimport 'src/styles/index.css';\nimport Home from 'src/views/Home';\nimport Address from 'src/views/Address';\nimport * as serviceWorker from 'src/serviceWorker';\nimport configureStore, { history } from 'src/configureStore';\n\nconst store = configureStore();\nconst rootElement = document.getElementById('root');\n\nconst app = (\n  <React.StrictMode>\n    <Provider store={store} context={ReactReduxContext}>\n      <ConnectedRouter history={history} context={ReactReduxContext}>\n        <Switch>\n          <Home path=\"/search\" exact />\n          <Address path=\"/address\" exact />\n          <Route path=\"*\" render={() => <Redirect to=\"/search\" />} />\n        </Switch>\n      </ConnectedRouter>\n    </Provider>\n  </React.StrictMode>\n);\n\nif (rootElement && rootElement.hasChildNodes()) {\n  ReactDOM.hydrate(app, rootElement);\n} else {\n  ReactDOM.render(app, rootElement);\n}\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}